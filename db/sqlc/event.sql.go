// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: event.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
 event_name, about, cost, event_date, start_time, end_time
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, event_name, created_at, about, event_date, mode, cost, start_time, end_time
`

type CreateEventParams struct {
	EventName string    `json:"event_name"`
	About     string    `json:"about"`
	Cost      string    `json:"cost"`
	EventDate time.Time `json:"event_date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.EventName,
		arg.About,
		arg.Cost,
		arg.EventDate,
		arg.StartTime,
		arg.EndTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventName,
		&i.CreatedAt,
		&i.About,
		&i.EventDate,
		&i.Mode,
		&i.Cost,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, event_name, created_at, about, event_date, mode, cost, start_time, end_time FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventName,
		&i.CreatedAt,
		&i.About,
		&i.EventDate,
		&i.Mode,
		&i.Cost,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, event_name, created_at, about, event_date, mode, cost, start_time, end_time FROM events
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventName,
			&i.CreatedAt,
			&i.About,
			&i.EventDate,
			&i.Mode,
			&i.Cost,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events SET id = $1 , event_name =$2 ,about = $3, cost = $4, event_date = $5, start_time = $6, end_time = $7
WHERE id = $1
RETURNING id, event_name, created_at, about, event_date, mode, cost, start_time, end_time
`

type UpdateEventParams struct {
	ID        int64     `json:"id"`
	EventName string    `json:"event_name"`
	About     string    `json:"about"`
	Cost      string    `json:"cost"`
	EventDate time.Time `json:"event_date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.EventName,
		arg.About,
		arg.Cost,
		arg.EventDate,
		arg.StartTime,
		arg.EndTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventName,
		&i.CreatedAt,
		&i.About,
		&i.EventDate,
		&i.Mode,
		&i.Cost,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
